name: SFDX-CLI Validate on PR open to main
on:
  pull_request:
    branches:
      - main
    types:
      - closed
jobs:
  SFDX-CLI-Deploy:
    if: github.event.pull_request.merged == true  # Ensures the job runs only if the PR was merged.
    runs-on: ubuntu-latest
    env:
      BASE_BRANCH: "origin/main"

    steps:
      - name: PR was merged
        run: echo "🎉 PR was merged successfully!"

      - name: Runner
        run: echo "🐧 GitHub Action running on ${{ runner.os }}"

      - name: GitHub Repository
        run: echo "🔎 Retrieving ${{ github.ref }} from ${{ github.repository }}."

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch the entire history to ensure 'main' branch is available

      - name: Fetch Main Branch
        run: git fetch origin main  # Explicitly fetch the main branch to use for delta comparison

      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli

      - name: Checkout Salesforce CLI version
        run: sf --version

      - name: Install sfdx-git-delta
        run: |
          configdir="$HOME/.config/sf"
          mkdir -p "$configdir"
          echo '["sfdx-git-delta"]' > $configdir/unsignedPluginAllowList.json
          sf plugins:install sfdx-git-delta

      - name: Install Salesforce Scanner Plugin
        run: sf plugins:install @salesforce/sfdx-scanner

      - name: Checkout Salesforce plugins version
        run: sf plugins

#      - name: Run Code Scan
#        id: scan_code
#        run: sf scanner run --target "./force-app/main/default/classes/*.cls" --pmdconfig ./ruleref.xml --format "table" -s 3

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
          sf org login jwt --client-id=${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwt-key-file=server.key --username=${{ secrets.SALESFORCE_GITHUB_USERNAME }} --set-default-dev-hub

#      - name: Run Apex Tests
#        run: sf apex run test --result-format human --code-coverage --wait 10 -o ${{ secrets.SALESFORCE_GITHUB_USERNAME }}

      - name: Find delta changes and create package.xml
        run: |
          mkdir -p "md_out"
          sf sgd source delta --to "HEAD" --from "${{ env.BASE_BRANCH }}" --output ./md_out
          cat ./md_out/package/package.xml

      - name: Preview Deployment
        run: sf project deploy validate --manifest=./md_out/package/package.xml --test-level=RunLocalTests --target-org=${{ secrets.SALESFORCE_GITHUB_USERNAME }}

      - name: Deploy to Salesforce
        id: deploy
        run: |
          deploy_output=$(sf project deploy start --manifest=./md_out/package/package.xml --test-level=RunLocalTests --target-org=${{ secrets.SALESFORCE_GITHUB_USERNAME }})
          echo "Deploy Output: $deploy_output"
          echo "DEPLOY_ID=$(echo $deploy_output | grep -o 'Deploy ID: [^ ]*' | awk '{print $3}')" >> $GITHUB_ENV

      - name: Get Deployment Report
        run: |
          echo "Deploy Id: ${{ env.DEPLOY_ID }}"
          sf project deploy report --use-most-recent --wait 20 --target-org ${{ secrets.SALESFORCE_GITHUB_USERNAME }}
