name: SFDX-CLI Deploy from Repository
on:
  push:
    branches:
      - main
jobs:
  SFDX-CLI-Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Runner
        run: echo "🐧 GitHub Action running on ${{ runner.os }}"

      - name: GitHub Repository
        run: echo "🔎 Retrieving ${{ github.ref }} from ${{ github.repository }}."

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 3 # Fetch the last 2 commits - remove later

      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli

      - name: Checkout Salesforce CLI version
        run: sf --version

      - name: Install sfdx-git-delta
        run: |
          configdir="$HOME/.config/sf"
          mkdir -p "$configdir"
          echo '["sfdx-git-delta"]' > $configdir/unsignedPluginAllowList.json
          sf plugins:install sfdx-git-delta

      - name: Checkout Git Delta version
        run: sf plugins

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
          sf org login jwt --client-id=${{ secrets.SALESFORCE_CONSUMER_KEY }} --jwt-key-file=server.key --username=${{ secrets.SALESFORCE_GITHUB_USERNAME }} --set-default-dev-hub

      - name: Run Apex Tests
        run: sf apex run test --result-format human --code-coverage --wait 10 -o ${{ secrets.SALESFORCE_GITHUB_USERNAME }}

      - name: Find delta changes and create package.xml
        run: |
          mkdir -p "md_out"
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output ./md_out
          cat ./md_out/package/package.xml

      - name: Preview Deployment
        run: sf project deploy validate --manifest=./md_out/package/package.xml --test-level=RunLocalTests --target-org=${{ secrets.SALESFORCE_GITHUB_USERNAME }}

      - name: Deploy to Salesforce
        id: deploy
        run: |
          deploy_output=$(sf project deploy start --manifest=./md_out/package/package.xml --test-level=RunLocalTests --target-org=${{ secrets.SALESFORCE_GITHUB_USERNAME }})
          echo "Deploy Output: $deploy_output"
          echo "DEPLOY_ID=$(echo $deploy_output | grep -o 'Deploy ID: [^ ]*' | awk '{print $3}')" >> $GITHUB_ENV

      - name: Get Deployment Report
        run: |
          echo "Deploy Id: ${{ env.DEPLOY_ID }}"
          sf project deploy report --use-most-recent --wait 20 --target-org ${{ secrets.SALESFORCE_GITHUB_USERNAME }}
